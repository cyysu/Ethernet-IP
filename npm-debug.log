0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'i',
1 verbose cli   'memwatch',
1 verbose cli   '--save' ]
2 info using npm@2.5.1
3 info using node@v0.12.0
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 warn package.json net@1.0.2 net is also the name of a node core module.
6 warn package.json net@1.0.2 'repositories' (plural) Not supported. Please pick one as the 'repository' field
7 warn package.json net@1.0.2 No README data
8 silly cache add args [ 'memwatch', null ]
9 verbose cache add spec memwatch
10 silly cache add parsed spec { raw: 'memwatch',
10 silly cache add   scope: null,
10 silly cache add   name: 'memwatch',
10 silly cache add   rawSpec: '',
10 silly cache add   spec: '*',
10 silly cache add   type: 'range' }
11 verbose addNamed memwatch@*
12 silly addNamed semver.valid null
13 silly addNamed semver.validRange *
14 silly addNameRange { name: 'memwatch', range: '*', hasData: false }
15 silly mapToRegistry name memwatch
16 silly mapToRegistry using default registry
17 silly mapToRegistry registry https://registry.npmjs.org/
18 silly mapToRegistry uri https://registry.npmjs.org/memwatch
19 verbose addNameRange registry:https://registry.npmjs.org/memwatch not in flight; fetching
20 verbose request uri https://registry.npmjs.org/memwatch
21 verbose request no auth needed
22 info attempt registry request try #1 at 3:54:32 PM
23 verbose request id 121c1c15ee9ce38a
24 http request GET https://registry.npmjs.org/memwatch
25 http 200 https://registry.npmjs.org/memwatch
26 silly get cb [ 200,
26 silly get   { server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
26 silly get     etag: '"1F29AGC6QNBGKFZQR3ZUK4J81"',
26 silly get     'content-type': 'application/json',
26 silly get     'cache-control': 'max-age=60',
26 silly get     'content-length': '37420',
26 silly get     'accept-ranges': 'bytes',
26 silly get     date: 'Wed, 02 Sep 2015 12:54:31 GMT',
26 silly get     via: '1.1 varnish',
26 silly get     age: '0',
26 silly get     connection: 'keep-alive',
26 silly get     'x-served-by': 'cache-fra1226-FRA',
26 silly get     'x-cache': 'HIT',
26 silly get     'x-cache-hits': '1',
26 silly get     'x-timer': 'S1441198471.405040,VS0,VE105',
26 silly get     vary: 'Accept' } ]
27 verbose get saving memwatch to C:\Users\admin\AppData\Roaming\npm-cache\registry.npmjs.org\memwatch\.cache.json
28 silly addNameRange number 2 { name: 'memwatch', range: '*', hasData: true }
29 silly addNameRange versions [ 'memwatch',
29 silly addNameRange   [ '0.1.0',
29 silly addNameRange     '0.1.1',
29 silly addNameRange     '0.1.2',
29 silly addNameRange     '0.1.3',
29 silly addNameRange     '0.1.4',
29 silly addNameRange     '0.1.5',
29 silly addNameRange     '0.2.0',
29 silly addNameRange     '0.2.1',
29 silly addNameRange     '0.2.2' ] ]
30 verbose addNamed memwatch@0.2.2
31 silly addNamed semver.valid 0.2.2
32 silly addNamed semver.validRange 0.2.2
33 silly mapToRegistry name memwatch
34 silly mapToRegistry using default registry
35 silly mapToRegistry registry https://registry.npmjs.org/
36 silly mapToRegistry uri https://registry.npmjs.org/memwatch
37 verbose addRemoteTarball https://registry.npmjs.org/memwatch/-/memwatch-0.2.2.tgz not in flight; adding
38 verbose addRemoteTarball [ 'https://registry.npmjs.org/memwatch/-/memwatch-0.2.2.tgz',
38 verbose addRemoteTarball   '779e8cd982532b6221b6ed1c1269098bee16f92c' ]
39 info retry fetch attempt 1 at 3:54:33 PM
40 info attempt registry request try #1 at 3:54:33 PM
41 http fetch GET https://registry.npmjs.org/memwatch/-/memwatch-0.2.2.tgz
42 http fetch 200 https://registry.npmjs.org/memwatch/-/memwatch-0.2.2.tgz
43 silly fetchAndShaCheck shasum 779e8cd982532b6221b6ed1c1269098bee16f92c
44 verbose addTmpTarball C:\Users\admin\AppData\Local\Temp\npm-5180-e29b6746\registry.npmjs.org\memwatch\-\memwatch-0.2.2.tgz not in flight; adding
45 verbose addTmpTarball already have metadata; skipping unpack for memwatch@0.2.2
46 silly cache afterAdd memwatch@0.2.2
47 verbose afterAdd C:\Users\admin\AppData\Roaming\npm-cache\memwatch\0.2.2\package\package.json not in flight; writing
48 verbose afterAdd C:\Users\admin\AppData\Roaming\npm-cache\memwatch\0.2.2\package\package.json written
49 silly install resolved [ { name: 'memwatch',
49 silly install resolved     description: 'Keep an eye on your memory usage, and discover and isolate leaks.',
49 silly install resolved     version: '0.2.2',
49 silly install resolved     author: { name: 'Lloyd Hilaiel', url: 'http://lloyd.io' },
49 silly install resolved     engines: { node: '>= 0.6.0' },
49 silly install resolved     repository:
49 silly install resolved      { type: 'git',
49 silly install resolved        url: 'https://github.com/lloyd/node-memwatch.git' },
49 silly install resolved     main: 'include.js',
49 silly install resolved     licenses: [ [Object] ],
49 silly install resolved     bugs: { url: 'https://github.com/lloyd/node-memwatch/issues' },
49 silly install resolved     scripts: { install: 'node-gyp rebuild', test: 'mocha tests' },
49 silly install resolved     devDependencies: { mocha: '1.2.2', should: '0.6.3', 'node-gyp': '0.5.7' },
49 silly install resolved     contributors: [ [Object], [Object], [Object] ],
49 silly install resolved     readme: '`node-memwatch`: Leak Detection and Heap Diffing for Node.JS\n============================================================\n\n[![Build Status](https://secure.travis-ci.org/lloyd/node-memwatch.png)](http://travis-ci.org/lloyd/node-memwatch)\n\n`node-memwatch` is here to help you detect and find memory leaks in\nNode.JS code.  It provides:\n\n- A `leak` event, emitted when it appears your code is leaking memory.\n\n- A `stats` event, emitted occasionally, giving you\n  data describing your heap usage and trends over time.\n\n- A `HeapDiff` class that lets you compare the state of your heap between\n  two points in time, telling you what has been allocated, and what\n  has been released.\n\n\nInstallation\n------------\n\n- `npm install memwatch`\n\nor\n\n- `git clone git://github.com/lloyd/node-memwatch.git`\n\n\nDescription\n-----------\n\nThere are a growing number of tools for debugging and profiling memory\nusage in Node.JS applications, but there is still a need for a\nplatform-independent native module that requires no special\ninstrumentation.  This module attempts to satisfy that need.\n\nTo get started, import `node-memwatch` like so:\n\n```javascript\nvar memwatch = require(\'memwatch\');\n```\n\n### Leak Detection\n\nYou can then subscribe to `leak` events.  A `leak` event will be\nemitted when your heap usage has increased for five consecutive\ngarbage collections:\n\n```javascript\nmemwatch.on(\'leak\', function(info) { ... });\n```\n\nThe `info` object will look something like:\n\n```javascript\n{ start: Fri, 29 Jun 2012 14:12:13 GMT,\n  end: Fri, 29 Jun 2012 14:12:33 GMT,\n  growth: 67984,\n  reason: \'heap growth over 5 consecutive GCs (20s) - 11.67 mb/hr\' }\n```\n\n\n### Heap Usage\n\nThe best way to evaluate your memory footprint is to look at heap\nusage right aver V8 performs garbage collection.  `memwatch` does\nexactly this - it checks heap usage only after GC to give you a stable\nbaseline of your actual memory usage.\n\nWhen V8 performs a garbage collection (technically, we\'re talking\nabout a full GC with heap compaction), `memwatch` will emit a `stats`\nevent.\n\n```javascript\nmemwatch.on(\'stats\', function(stats) { ... });\n```\n\nThe `stats` data will look something like this:\n\n```javascript\n{\n  "num_full_gc": 17,\n  "num_inc_gc": 8,\n  "heap_compactions": 8,\n  "estimated_base": 2592568,\n  "current_base": 2592568,\n  "min": 2499912,\n  "max": 2592568,\n  "usage_trend": 0\n}\n```\n\n`estimated_base` and `usage_trend` are tracked over time.  If usage\ntrend is consistently positive, it indicates that your base heap size\nis continuously growing and you might have a leak.\n\nV8 has its own idea of when it\'s best to perform a GC, and under a\nheavy load, it may defer this action for some time.  To aid in\nspeedier debugging, `memwatch` provides a `gc()` method to force V8 to\ndo a full GC and heap compaction.\n\n\n### Heap Diffing\n\nSo far we have seen how `memwatch` can aid in leak detection.  For\nleak isolation, it provides a `HeapDiff` class that takes two snapshots\nand computes a diff between them.  For example:\n\n```javascript\n// Take first snapshot\nvar hd = new memwatch.HeapDiff();\n\n// do some things ...\n\n// Take the second snapshot and compute the diff\nvar diff = hd.end();\n```\n\nThe contents of `diff` will look something like:\n\n```javascript\n{\n  "before": { "nodes": 11625, "size_bytes": 1869904, "size": "1.78 mb" },\n  "after":  { "nodes": 21435, "size_bytes": 2119136, "size": "2.02 mb" },\n  "change": { "size_bytes": 249232, "size": "243.39 kb", "freed_nodes": 197,\n    "allocated_nodes": 10007,\n    "details": [\n      { "what": "String",\n        "size_bytes": -2120,  "size": "-2.07 kb",  "+": 3,    "-": 62\n      },\n      { "what": "Array",\n        "size_bytes": 66687,  "size": "65.13 kb",  "+": 4,    "-": 78\n      },\n      { "what": "LeakingClass",\n        "size_bytes": 239952, "size": "234.33 kb", "+": 9998, "-": 0\n      }\n    ]\n  }\n```\n\nThe diff shows that during the sample period, the total number of\nallocated `String` and `Array` classes decreased, but `Leaking Class`\ngrew by 9998 allocations.  Hmmm.\n\nYou can use `HeapDiff` in your `on(\'stats\')` callback; even though it\ntakes a memory snapshot, which triggers a V8 GC, it will not trigger\nthe `stats` event itself.  Because that would be silly.\n\n\nFuture Work\n-----------\n\nPlease see the Issues to share suggestions and contribute!\n\n\nLicense\n-------\n\nhttp://wtfpl.org\n',
49 silly install resolved     readmeFilename: 'README.md',
49 silly install resolved     _id: 'memwatch@0.2.2',
49 silly install resolved     dist:
49 silly install resolved      { shasum: '779e8cd982532b6221b6ed1c1269098bee16f92c',
49 silly install resolved        tarball: 'http://registry.npmjs.org/memwatch/-/memwatch-0.2.2.tgz' },
49 silly install resolved     _from: 'memwatch@*',
49 silly install resolved     _npmVersion: '1.2.14',
49 silly install resolved     _npmUser: { name: 'lloyd', email: 'lloyd@hilaiel.com' },
49 silly install resolved     maintainers: [ [Object] ],
49 silly install resolved     directories: {},
49 silly install resolved     _shasum: '779e8cd982532b6221b6ed1c1269098bee16f92c',
49 silly install resolved     _resolved: 'https://registry.npmjs.org/memwatch/-/memwatch-0.2.2.tgz' } ]
50 info install memwatch@0.2.2 into C:\Users\admin\Desktop\NODEJS\testEthernetIp
51 info installOne memwatch@0.2.2
52 verbose installOne of memwatch to C:\Users\admin\Desktop\NODEJS\testEthernetIp not in flight; installing
53 verbose lock using C:\Users\admin\AppData\Roaming\npm-cache\_locks\memwatch-dcb489b95cc24495.lock for C:\Users\admin\Desktop\NODEJS\testEthernetIp\node_modules\memwatch
54 silly install write writing memwatch 0.2.2 to C:\Users\admin\Desktop\NODEJS\testEthernetIp\node_modules\memwatch
55 silly cache addNamed cb memwatch@0.2.2
56 verbose unbuild node_modules\memwatch
57 verbose gentlyRm vacuuming C:\Users\admin\Desktop\NODEJS\testEthernetIp\node_modules\memwatch
58 verbose tar unpack C:\Users\admin\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
59 verbose tar unpacking to C:\Users\admin\Desktop\NODEJS\testEthernetIp\node_modules\memwatch
60 verbose gentlyRm vacuuming C:\Users\admin\Desktop\NODEJS\testEthernetIp\node_modules\memwatch
61 silly gunzTarPerm modes [ '777', '666' ]
62 silly gunzTarPerm extractEntry package.json
63 silly gunzTarPerm modified mode [ 'package.json', 420, 438 ]
64 silly gunzTarPerm extractEntry .npmignore
65 silly gunzTarPerm modified mode [ '.npmignore', 420, 438 ]
66 silly gunzTarPerm extractEntry README.md
67 silly gunzTarPerm modified mode [ 'README.md', 420, 438 ]
68 silly gunzTarPerm extractEntry tests.js
69 silly gunzTarPerm modified mode [ 'tests.js', 420, 438 ]
70 silly gunzTarPerm extractEntry foo.js
71 silly gunzTarPerm modified mode [ 'foo.js', 420, 438 ]
72 silly gunzTarPerm extractEntry include.js
73 silly gunzTarPerm modified mode [ 'include.js', 420, 438 ]
74 silly gunzTarPerm extractEntry .travis.yml
75 silly gunzTarPerm modified mode [ '.travis.yml', 420, 438 ]
76 silly gunzTarPerm extractEntry ChangeLog
77 silly gunzTarPerm modified mode [ 'ChangeLog', 420, 438 ]
78 silly gunzTarPerm extractEntry #wscript#
79 silly gunzTarPerm modified mode [ '#wscript#', 420, 438 ]
80 silly gunzTarPerm extractEntry binding.gyp
81 silly gunzTarPerm modified mode [ 'binding.gyp', 420, 438 ]
82 silly gunzTarPerm extractEntry src/heapdiff.cc
83 silly gunzTarPerm modified mode [ 'src/heapdiff.cc', 420, 438 ]
84 silly gunzTarPerm extractEntry src/heapdiff.hh
85 silly gunzTarPerm modified mode [ 'src/heapdiff.hh', 420, 438 ]
86 silly gunzTarPerm extractEntry src/init.cc
87 silly gunzTarPerm modified mode [ 'src/init.cc', 420, 438 ]
88 silly gunzTarPerm extractEntry src/memwatch.cc
89 silly gunzTarPerm modified mode [ 'src/memwatch.cc', 420, 438 ]
90 silly gunzTarPerm extractEntry src/memwatch.hh
91 silly gunzTarPerm modified mode [ 'src/memwatch.hh', 420, 438 ]
92 silly gunzTarPerm extractEntry src/platformcompat.hh
93 silly gunzTarPerm modified mode [ 'src/platformcompat.hh', 420, 438 ]
94 silly gunzTarPerm extractEntry src/util.cc
95 silly gunzTarPerm modified mode [ 'src/util.cc', 420, 438 ]
96 silly gunzTarPerm extractEntry src/util.hh
97 silly gunzTarPerm modified mode [ 'src/util.hh', 420, 438 ]
98 silly gunzTarPerm extractEntry examples/basic_heapdiff.js
99 silly gunzTarPerm modified mode [ 'examples/basic_heapdiff.js', 420, 438 ]
100 silly gunzTarPerm extractEntry examples/do_nothing_server.js
101 silly gunzTarPerm modified mode [ 'examples/do_nothing_server.js', 420, 438 ]
102 silly gunzTarPerm extractEntry examples/slightly_leaky.js
103 silly gunzTarPerm modified mode [ 'examples/slightly_leaky.js', 420, 438 ]
104 info preinstall memwatch@0.2.2
105 silly install resolved []
106 verbose about to build C:\Users\admin\Desktop\NODEJS\testEthernetIp\node_modules\memwatch
107 info build C:\Users\admin\Desktop\NODEJS\testEthernetIp\node_modules\memwatch
108 verbose linkStuff [ false,
108 verbose linkStuff   false,
108 verbose linkStuff   false,
108 verbose linkStuff   'C:\\Users\\admin\\Desktop\\NODEJS\\testEthernetIp\\node_modules' ]
109 info linkStuff memwatch@0.2.2
110 verbose linkBins memwatch@0.2.2
111 verbose linkMans memwatch@0.2.2
112 verbose rebuildBundles memwatch@0.2.2
113 info install memwatch@0.2.2
114 verbose unsafe-perm in lifecycle true
115 info memwatch@0.2.2 Failed to exec install script
116 verbose unlock done using C:\Users\admin\AppData\Roaming\npm-cache\_locks\memwatch-dcb489b95cc24495.lock for C:\Users\admin\Desktop\NODEJS\testEthernetIp\node_modules\memwatch
117 verbose stack Error: memwatch@0.2.2 install: `node-gyp rebuild`
117 verbose stack Exit status 1
117 verbose stack     at EventEmitter.<anonymous> (C:\Program Files\nodejs\node_modules\npm\lib\utils\lifecycle.js:213:16)
117 verbose stack     at EventEmitter.emit (events.js:110:17)
117 verbose stack     at ChildProcess.<anonymous> (C:\Program Files\nodejs\node_modules\npm\lib\utils\spawn.js:14:12)
117 verbose stack     at ChildProcess.emit (events.js:110:17)
117 verbose stack     at maybeClose (child_process.js:1008:16)
117 verbose stack     at Process.ChildProcess._handle.onexit (child_process.js:1080:5)
118 verbose pkgid memwatch@0.2.2
119 verbose cwd C:\Users\admin\Desktop\NODEJS\testEthernetIp
120 error Windows_NT 6.3.9600
121 error argv "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "i" "memwatch" "--save"
122 error node v0.12.0
123 error npm  v2.5.1
124 error code ELIFECYCLE
125 error memwatch@0.2.2 install: `node-gyp rebuild`
125 error Exit status 1
126 error Failed at the memwatch@0.2.2 install script 'node-gyp rebuild'.
126 error This is most likely a problem with the memwatch package,
126 error not with npm itself.
126 error Tell the author that this fails on your system:
126 error     node-gyp rebuild
126 error You can get their info via:
126 error     npm owner ls memwatch
126 error There is likely additional logging output above.
127 verbose exit [ 1, true ]
128 verbose unbuild node_modules\memwatch
129 info preuninstall memwatch@0.2.2
130 info uninstall memwatch@0.2.2
131 verbose unbuild rmStuff memwatch@0.2.2 from C:\Users\admin\Desktop\NODEJS\testEthernetIp\node_modules
132 info postuninstall memwatch@0.2.2
133 verbose gentlyRm vacuuming C:\Users\admin\Desktop\NODEJS\testEthernetIp\node_modules\memwatch
134 silly gentlyRm purging C:\Users\admin\Desktop\NODEJS\testEthernetIp\node_modules\memwatch
135 silly gentlyRm quitting because other entries in C:\Users\admin\Desktop\NODEJS\testEthernetIp\node_modules
